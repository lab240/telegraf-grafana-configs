## Modbus RTU sensor configuration
[[inputs.modbus]]
  name = "FPC-0801"
  slave_id = 1
  timeout = "1s"
  controller = "file:///dev/ttyS1"
  baud_rate = 9600
  data_bits = 8
  parity = "N"
  stop_bits = 1

  ## Digital inputs to read from the device
  holding_registers = [
    {  measurement="FPC-0801", name = "voltage", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [72] },
    { measurement="FPC-0801", name = "current", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [73] },
    { measurement="FPC-0801", name = "power", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [74] },   
    { measurement="FPC-0801", name = "freq", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [81] },
    { measurement="FPC-0801", name = "energy", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [75] },
    { measurement="FPC-0801", name = "energy1", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [76] },
    { measurement="FPC-0801", name = "powerfactor", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [77] },
    { measurement="FPC-0801", name = "current_range", byte_order = "AB", data_type = "UINT16", scale = 1.0, address = [3] }
  ]

  
     
[[processors.starlark]]
 # Reads the Starlark script embedded

  source = '''
  
load("logging.star", "log")
def apply(metric):
  
  metric.fields["z_multiplier_current"]=1000
  metric.fields["z_multiplier_pf"]=1000
  metric.fields["z_multiplier_energy"]=3200
  metric.fields["z_multiplier_energy1"]=3200
  metric.fields["z_multiplier_power"]=10
  metric.fields["z_multiplier_freq"]=100
  metric.fields["z_multiplier_voltage"]=100

  return metric
'''

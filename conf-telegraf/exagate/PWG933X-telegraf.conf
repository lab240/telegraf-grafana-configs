###snmp exagate 7001

[[inputs.snmp]]

  agents = ["udp://87.245.206.187:1167"]

  version = 2
  community = "v1read"
  
  path = ["/usr/share/snmp/mibs"]

  [[inputs.snmp.field]]
    oid = "RFC1213-MIB::sysUpTime.0"
    name = "uptime"

  [[inputs.snmp.field]]
    oid = "EXAGATE-GLOBAL-REG::sysguardsystemName.0"
    name = "name"
    is_tag = true
 
 [[inputs.snmp.table]]
    oid = "EXAGATE-GLOBAL-REG::sysguardSensorTable"
    name = "PWG-9332-307-91-SIPH"
    inherit_tags = ["name"]
    index_as_tag = true


## EXAGATE PWG2-9332

[[processors.starlark]]
 # Reads the Starlark script embedded

  source = '''
  
load("logging.star", "log")
def apply(metric):
  

  
## EXAGATE PWG2
  if "PWG-9132" in  metric.tags.get('name') and "index" in metric.tags and "sysguardSensorValue" in metric.fields:

    m = metric.fields["sysguardSensorValue"]
    id= metric.fields["sysguardSensorID"]
    metric.fields.clear()

    if   id == 1: metric.fields["C1_V"]=m
    elif id == 2: metric.fields["C1_A"]=m 
    elif id == 3: metric.fields["C1_Freq"]=m
    elif id == 4: metric.fields["C1_PowerFator"]=m
    elif id == 5: metric.fields["C1_ActivePower"]=m
    elif id == 6: metric.fields["C1_ApperantPower"]=m
    elif id == 7: metric.fields["C1_ReactivePower"]=m
    elif id == 8: metric.fields["C1_Fuse"]=m

    elif id == 9: metric.fields["C2_V"]=m
    elif id == 10: metric.fields["C2_A"]=m
    elif id == 11: metric.fields["C2_Freq"]=m
    elif id == 12: metric.fields["C2_PowerFator"]=m
    elif id == 13: metric.fields["C2_ActivePower"]=m
    elif id == 14: metric.fields["C2_ApperantPower"]=m
    elif id == 15: metric.fields["C2_ReactivePower"]=m
    elif id == 16: metric.fields["C2_Fuse"]=m

    elif id == 17: metric.fields["L1_V"]=m
    elif id == 18: metric.fields["L1_A"]=m
    elif id == 19: metric.fields["L1_Freq"]=m
    elif id == 20: metric.fields["L1_ActivePower"]=m
    elif id == 21: metric.fields["L1_ApperantPower"]=m
    elif id == 22: metric.fields["L1_ReactivePower"]=m
    elif id == 23: metric.fields["L1_PowerFator"]=m
    elif id == 24: metric.fields["L1_Load"]=m
    
    elif id == 30: metric.fields["O1_Volt"]=m
    elif id == 31: metric.fields["O1_Current"]=m
    elif id == 32: metric.fields["O1_Energy"]=m
    elif id == 33: metric.fields["O1_PowerFactor"]=m
    elif id == 34: metric.fields["O1_ActivePower"]=m
    elif id == 35: metric.fields["O1_ApperantPower"]=m
    elif id == 36: metric.fields["O1_Freq"]=m
    elif id == 37: metric.fields["O1_ReactivePower"]=m
    
    elif id == 38: metric.fields["O2_Volt"]=m
    elif id == 39: metric.fields["O2_Current"]=m
    elif id == 40: metric.fields["O2_Energy"]=m
    elif id == 41: metric.fields["O2_PowerFactor"]=m
    elif id == 42: metric.fields["O2_ActivePower"]=m
    elif id == 43: metric.fields["O2_ApperantPower"]=m
    elif id == 44: metric.fields["O2_Freq"]=m
    elif id == 45: metric.fields["O2_ReactivePower"]=m
    
    elif id == 46: metric.fields["O3_Volt"]=m
    elif id == 47: metric.fields["O3_Current"]=m
    elif id == 48: metric.fields["O3_Energy"]=m
    elif id == 49: metric.fields["O3_PowerFactor"]=m
    elif id == 50: metric.fields["O3_ActivePower"]=m
    elif id == 51: metric.fields["O3_ApperantPower"]=m
    elif id == 52: metric.fields["O3_Freq"]=m
    elif id == 53: metric.fields["O3_ReactivePower"]=m
    
    elif id == 54: metric.fields["O4_Volt"]=m
    elif id == 55: metric.fields["O4_Current"]=m
    elif id == 56: metric.fields["O4_Energy"]=m
    elif id == 57: metric.fields["O4_PowerFactor"]=m
    elif id == 58: metric.fields["O4_ActivePower"]=m
    elif id == 59: metric.fields["O4_ApperantPower"]=m
    elif id == 60: metric.fields["O4_Freq"]=m
    elif id == 61: metric.fields["O4_ReactivePower"]=m
    
    elif id == 62: metric.fields["O5_Volt"]=m
    elif id == 63: metric.fields["O5_Current"]=m
    elif id == 64: metric.fields["O5_Energy"]=m
    elif id == 65: metric.fields["O5_PowerFactor"]=m
    elif id == 66: metric.fields["O5_ActivePower"]=m
    elif id == 67: metric.fields["O5_ApperantPower"]=m
    elif id == 68: metric.fields["O5_Freq"]=m
    elif id == 69: metric.fields["O5_ReactivePower"]=m
    
    elif id == 70: metric.fields["O6_Volt"]=m
    elif id == 71: metric.fields["O6_Current"]=m
    elif id == 72: metric.fields["O6_Energy"]=m
    elif id == 73: metric.fields["O6_PowerFactor"]=m
    elif id == 74: metric.fields["O6_ActivePower"]=m
    elif id == 75: metric.fields["O6_ApperantPower"]=m
    elif id == 76: metric.fields["O6_Freq"]=m
    elif id == 77: metric.fields["O6_ReactivePower"]=m
    
    elif id == 78: metric.fields["O7_Volt"]=m
    elif id == 79: metric.fields["O7_Current"]=m
    elif id == 80: metric.fields["O7_Energy"]=m
    elif id == 81: metric.fields["O7_PowerFactor"]=m
    elif id == 82: metric.fields["O7_ActivePower"]=m
    elif id == 83: metric.fields["O7_ApperantPower"]=m
    elif id == 84: metric.fields["O7_Freq"]=m
    elif id == 85: metric.fields["O7_ReactivePower"]=m
    
    elif id == 86: metric.fields["O8_Volt"]=m
    elif id == 87: metric.fields["O8_Current"]=m
    elif id == 88: metric.fields["O8_Energy"]=m
    elif id == 89: metric.fields["O8_PowerFactor"]=m
    elif id == 90: metric.fields["O8_ActivePower"]=m
    elif id == 91: metric.fields["O8_ApperantPower"]=m
    elif id == 92: metric.fields["O8_Freq"]=m
    elif id == 93: metric.fields["O8_ReactivePower"]=m
 
 

  return metric
'''


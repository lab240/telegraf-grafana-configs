### snmp
[[inputs.snmp]]

  agents = ["udp://87.245.206.187:1163"]

  #path = ["/usr/share/snmp/mibs"]

  [[inputs.snmp.field]]
    oid = "RFC1213-MIB::sysUpTime.0"
    name = "uptime"

  [[inputs.snmp.field]]
    oid = "RFC1213-MIB::sysName.0"
    name = "name"
	is_tag = true

  [[inputs.snmp.table]]
    oid = "ELEMY-CCU1001-MIB::elmCcuThSensorsTable"
    name = "CC01meg"
    inherit_tags = ["name"]

  [[inputs.snmp.table.field]]
    oid = "ELEMY-CCU1001-MIB::elmCcuThSensorCurTemperature"
    name = "Temp0"

   [[inputs.snmp.table.field]]
     oid = "ELEMY-CCU1001-MIB::elmCcuThSensorCurHumidity"
     name = "Hum0"

  [[inputs.snmp.table]]
    oid = "ELEMY-CCU1001-MIB::elmCcuVSensorsTable"
    name = "CC01meg"
    inherit_tags = ["name"]

    [[inputs.snmp.table.field]]
      oid = "ELEMY-CCU1001-MIB::elmCcuVSensorCurVoltage"
      name = "Volt"

    [[inputs.snmp.table.field]]
      oid = "ELEMY-CCU1001-MIB::elmCcuRackClCurFanState"
      name = "Fan"

    [[inputs.snmp.table.field]]
      oid = "ELEMY-CCU1001-MIB::elmCcuRackClOvrHeaterState"
      name = "Heat"

    [[inputs.snmp.table.field]]
      oid = "ELEMY-CCU1001-MIB::elmCcuRackClCurAirConState"
      name = "Cooling"

 	[[inputs.snmp.table]]
      oid = "ELEMY-CCU1001-MIB::elmCcuDoTable"
      name = "CC01meg"
      inherit_tags = ["name"]
      index_as_tag = true

 	[[inputs.snmp.table]]
      oid = "ELEMY-CCU1001-MIB::elmCcuDiTable"
      name = "CC01meg"
      inherit_tags = ["name"]
      index_as_tag = true



[[processors.starlark]]
 # Reads the Starlark script embedded

  source = '''
  
load("logging.star", "log")
def apply(metric):
  

# CC1001  

  if metric.fields.get('elmCcuThSensorCurStatus') == 2 :
    metric.fields.clear()
    return metric
    
  #for k in metric.fields:
  #  log.debug(k)
    
#  for k in metric.fields:
#    log.debug(k)
   #	pass
   # log.debug(metric.fields[str(k)])
  
  if metric.tags.get('name') == "CCU-1001" and "elmCcuDoCurState" in metric.fields and "index" in metric.tags:
    index_str=metric.tags["index"]
    m = metric.fields["elmCcuDoCurState"]
    outstate_str="Output_state"+str(int(index_str)+1)
    metric.fields.clear()
    metric.fields[outstate_str]=m
    return metric
    
  if metric.tags.get('name') == "CCU-1001" and "elmCcuDiCurState" in metric.fields and "index" in metric.tags:
    index_str=metric.tags["index"]
    m = metric.fields["elmCcuDiCurState"]
    outstate_str="Input_state"+str(int(index_str)+1)
    metric.fields.clear()
    metric.fields[outstate_str]=m
    return metric

  return metric
'''



## snmp
[[inputs.snmp]]

  agents = ["udp://87.245.206.187:1164"]

  # path = ["/root/.snmp/mibs"]

  [[inputs.snmp.field]]
    oid = "RFC1213-MIB::sysUpTime.0"
    name = "uptime"

  [[inputs.snmp.field]]
    oid = "RFC1213-MIB::sysName.0"
    name = "name"
    is_tag = true

  [[inputs.snmp.table]]
    oid = "ELEMY-ATS1204-MIB::elmAtsPowerInputTable"
    name = "ATS1204"
    inherit_tags = ["name"]
    index_as_tag = true

  [[inputs.snmp.table]]
    oid = "ELEMY-ATS1204-MIB::elmAtsPowerOutputTable"
    name = "ATS1204"
    inherit_tags = ["name"]
    index_as_tag = true

  [[inputs.snmp.table.field]]
      oid = "ELEMY-ATS1204-MIB::elmAtsPowerOutputCosF"
      name = "Cos-ph"

  [[inputs.snmp.table.field]]
      oid = "ELEMY-ATS1204-MIB::elmAtsPowerOutputI"
      name = "Amp-output"

  [[inputs.snmp.table.field]]
      oid = "ELEMY-ATS1204-MIB::elmAtsPowerOutputP"
      name = "Active-Power"

  [[inputs.snmp.table.field]]
      oid = "ELEMY-ATS1204-MIB::elmAtsPowerOutputS"
      name = "Full-Power"

  [[inputs.snmp.table.field]]
      oid = "ELEMY-ATS1204-MIB::elmAtsPowerOutputQ"
      name = "Reactive-Power"


 
     
[[processors.starlark]]
 # Reads the Starlark script embedded

  source = '''
  
load("logging.star", "log")
def apply(metric):
  
## ATS1204 & ATS1205
  if metric.tags.get('name') == "ATS1204" or metric.tags.get('name') == "ATS1205":
   if metric.fields.get('elmAtsPowerInputIsActive') == 0 :
     metric.fields.clear()
     return metric
   
  if metric.tags.get('name') == "ATS1204" or metric.tags.get('name') == "ATS1205":
  	if "elmAtsPowerInputVoltage" in metric.fields and "elmAtsPowerInputFreqence" in metric.fields and "index" in metric.tags:
  	  index_str=metric.tags["index"]
  	  m1 = metric.fields["elmAtsPowerInputVoltage"]
  	  m2 = metric.fields["elmAtsPowerInputFreqence"]
 	  outstate_str1="Volt_input"+str(int(index_str)+1)
 	  outstate_str2="Freq_input"+str(int(index_str)+1)
  	  metric.fields.clear()
	  metric.fields[outstate_str1]=m1
  	  metric.fields[outstate_str2]=m2
  	  return metric
  
  return metric
'''

